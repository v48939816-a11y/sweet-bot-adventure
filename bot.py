VLAD, [20.10.2025 11:37]
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import asyncio
import subprocess
import sys
import os
TOKEN = os.getenv("8285721437:AAEU7LArZhK_U9UWbbCL4eMGR59DP6cFFNY")

ADMIN_ID = 7816829354  # üëà –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# ====== –°–ª–æ–≤–∞—Ä—å —Ç–æ–≤–∞—Ä–æ–≤ ======
products_info = {
    "‚ùÑÔ∏è A‚ÄìPVP ‚ùÑÔ∏è": {
        "description": """üíé A‚ÄìPVP üíé
0.5–≥ ‚Äî 9.60 $ ‚âà 384 –≥—Ä–Ω
1–≥   ‚Äî 13.20 $ ‚âà 528 –≥—Ä–Ω
2–≥   ‚Äî 27.60 $ ‚âà 1104 –≥—Ä–Ω
3–≥   ‚Äî 28.80 $ ‚âà 1152 –≥—Ä–Ω
5–≥   ‚Äî 43.20 $ ‚âà 1728 –≥—Ä–Ω""",
        "image": r"C:\Users\artem\OneDrive\Desktop\POWER CANDY SHOP\a_pvp.png"
    },
    "‚ùÑÔ∏è –ú–ï–¢–ê–î–û–ù ‚ùÑÔ∏è": {
        "description": """üíé –ú–ï–¢–ê–î–û–ù üíé
0.25–≥ ‚Äî 10.90 $ ‚âà 436 –≥—Ä–Ω
0.5–≥  ‚Äî 18.00 $ ‚âà 720 –≥—Ä–Ω
1–≥    ‚Äî 33.60 $ ‚âà 1344 –≥—Ä–Ω
2–≥    ‚Äî 57.13 $ ‚âà 2285 –≥—Ä–Ω
5–≥    ‚Äî 72.00 $ ‚âà 2880 –≥—Ä–Ω""",
        "image": r"C:\Users\artem\OneDrive\Desktop\POWER CANDY SHOP\metadon.png"
    },
    "‚ùÑÔ∏è –ú–ï–§–ï–î–†–û–ù ‚ùÑÔ∏è": {
        "description": """üíé –ú–ï–§–ï–î–†–û–ù üíé
0.5–≥ ‚Äî 12.00 $ ‚âà 480 –≥—Ä–Ω
1–≥   ‚Äî 17.52 $ ‚âà 701 –≥—Ä–Ω
2–≥   ‚Äî 27.80 $ ‚âà 1112 –≥—Ä–Ω
5–≥   ‚Äî 51.60 $ ‚âà 2064 –≥—Ä–Ω""",
        "image": r"C:\Users\artem\OneDrive\Desktop\POWER CANDY SHOP\photo_2025-10-13_23-22-18.jpg"
    }
}

# ====== –°–æ—Å—Ç–æ—è–Ω–∏—è ======
# user_state[user_id] = {'level': 'start'|'products'|'country'|'city'|'district'|'payment'|'confirm', 'product':..., 'country':..., 'city':..., 'district':...}
user_state = {}

# ====== –ö–Ω–æ–ø–∫–∏ ======
btn_back = KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
back_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_back)

# –ö–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
products_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
for product in products_info.keys():
    products_keyboard.add(KeyboardButton(product))

# –ö–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
payment_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
payment_keyboard.add(KeyboardButton("ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ"), KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"))
payment_keyboard.add(btn_back)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –¥–∞–ª–µ–µ
confirm_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
confirm_keyboard.add(KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"))
confirm_keyboard.add(btn_back)

next_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
next_keyboard.add(KeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ"))

# ====== –ì–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ) ======
cities = {
    "–£–∫—Ä–∞–∏–Ω–∞": ["–ö–∏–µ–≤", "–õ—å–≤–æ–≤", "–û–¥–µ—Å—Å–∞", "–•–∞—Ä—å–∫–æ–≤", "–î–Ω–µ–ø—Ä", "–ó–∞–ø–æ—Ä–æ–∂—å–µ", "–•–µ—Ä—Å–æ–Ω", "–ß–µ—Ä–Ω–∏–≥–æ–≤", "–ü–æ–ª—Ç–∞–≤–∞", "–í–∏–Ω–Ω–∏—Ü–∞"],
    "–ë–µ–ª–∞—Ä—É—Å—å": ["–ú–∏–Ω—Å–∫", "–ì–æ–º–µ–ª—å", "–ú–æ–≥–∏–ª—ë–≤", "–ë—Ä–µ—Å—Ç", "–í–∏—Ç–µ–±—Å–∫", "–ì—Ä–æ–¥–Ω–æ", "–ë–æ–±—Ä—É–π—Å–∫", "–ú–æ–∑—ã—Ä—å", "–û—Ä—à–∞", "–ü–∏–Ω—Å–∫"],
    "–†–æ—Å—Å–∏—è": ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–°–∞–º–∞—Ä–∞", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "–£—Ñ–∞"]
}

VLAD, [20.10.2025 11:37]
districts = {
    "–ö–∏–µ–≤": ["–û–±–æ–ª–æ–Ω—Å–∫–∏–π", "–ü–æ–¥–æ–ª", "–®–µ–≤—á–µ–Ω–∫–æ–≤—Å–∫–∏–π", "–ü–µ—á–µ—Ä—Å–∫–∏–π", "–î–∞—Ä–Ω–∏—Ü–∫–∏–π", "–°–≤—è—Ç–æ—à–∏–Ω—Å–∫–∏–π", "–î–µ—Å–Ω—è–Ω—Å–∫–∏–π", "–ì–æ–ª–æ—Å–µ–µ–≤—Å–∫–∏–π"],
    "–õ—å–≤–æ–≤": ["–ì–∞–ª–∏—Ü–∫–∏–π", "–§—Ä–∞–Ω–∫–æ–≤—Å–∫–∏–π", "–®–µ–≤—á–µ–Ω–∫–æ–≤—Å–∫–∏–π", "–°—ã—Ö–æ–≤—Å–∫–∏–π", "–ó–∞–ª–∏–∑–Ω—ã—á–Ω—ã–π", "–õ—ã—á–∞–∫–æ–≤—Å–∫–∏–π"],
    "–û–¥–µ—Å—Å–∞": ["–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π", "–°—É–≤–æ—Ä–æ–≤—Å–∫–∏–π", "–ö–∏–µ–≤—Å–∫–∏–π", "–ú–∞–ª–∏–Ω–æ–≤—Å–∫–∏–π", "–ß–µ—Ä–Ω–æ–º–æ—Ä—Å–∫–∏–π", "–°–ª–æ–±–æ–¥—Å–∫–æ–π"],
    "–•–∞—Ä—å–∫–æ–≤": ["–•–æ–ª–æ–¥–Ω–æ–≥–æ—Ä—Å–∫–∏–π", "–û—Å–Ω–æ–≤—è–Ω—Å–∫–∏–π", "–ö–∏–µ–≤—Å–∫–∏–π", "–°–ª–æ–±–æ–¥—Å–∫–æ–π", "–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π", "–ö–æ–º–∏–Ω—Ç–µ—Ä–Ω–æ–≤—Å–∫–∏–π"],
    "–î–Ω–µ–ø—Ä": ["–ê–º—É—Ä-–ù–∏–∂–Ω–µ–¥–Ω–µ–ø—Ä–æ–≤—Å–∫–∏–π", "–ñ–æ–≤—Ç–Ω–µ–≤—ã–π", "–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω—ã–π", "–°–∞–º–∞—Ä—Å–∫–∏–π", "–ß–µ—á–µ–ª–æ–≤—Å–∫–∏–π"],
    "–ú–∏–Ω—Å–∫": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–ü–∞—Ä—Ç–∏–∑–∞–Ω—Å–∫–∏–π", "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∏–π", "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π", "–ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∏–π"],
    "–ú–æ—Å–∫–≤–∞": ["–ê—Ä–±–∞—Ç", "–•–∞–º–æ–≤–Ω–∏–∫–∏", "–¢–≤–µ—Ä—Å–∫–æ–π", "–ü—Ä–µ—Å–Ω–µ–Ω—Å–∫–∏–π", "–°–æ–∫–æ–ª—å–Ω–∏–∫–∏", "–ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—á—å–µ", "–õ–µ—Ñ–æ—Ä—Ç–æ–≤–æ", "–ë–∞—Å–º–∞–Ω–Ω—ã–π", "–¢–∞–≥–∞–Ω—Å–∫–∏–π"],
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π", "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π", "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π", "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", "–ö—Ä–∞—Å–Ω–æ–≥–≤–∞—Ä–¥–µ–π—Å–∫–∏–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π"],
    "–ö–∞–∑–∞–Ω—å": ["–í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π", "–ö–∏—Ä–æ–≤—Å–∫–∏–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π"],
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π", "–ö–∏—Ä–æ–≤—Å–∫–∏–π"],
    "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥": ["–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", "–ß–∫–∞–ª–æ–≤—Å–∫–∏–π", "–í–µ—Ä—Ö-–ò—Å–µ—Ç—Å–∫–∏–π", "–ö–∏—Ä–æ–≤—Å–∫–∏–π"],
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥": ["–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "–ü—Ä–∏–æ–∫—Å–∫–∏–π", "–°–æ—Ä–º–æ–≤—Å–∫–∏–π"],
    "–°–∞–º–∞—Ä–∞": ["–ö–∏—Ä–æ–≤—Å–∫–∏–π", "–°–∞–º–∞—Ä—Å–∫–∏–π", "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π"],
    "–ß–µ–ª—è–±–∏–Ω—Å–∫": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π", "–¢—Ä–∞–∫—Ç–æ—Ä–æ–∑–∞–≤–æ–¥—Å–∫–∏–π", "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π"],
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": ["–í–æ—Ä–æ—à–∏–ª–æ–≤—Å–∫–∏–π", "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∏–π", "–ö–∏—Ä–æ–≤—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π"],
    "–£—Ñ–∞": ["–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π", "–û—Ä–¥–∂–æ–Ω–∏–∫–∏–¥–∑–µ–≤—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–î—ë–º—Å–∫–∏–π"]
}

# ====== –°–æ–æ–±—â–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ======
crypto_message = """ü™ô –û–ü–õ–ê–¢–ê –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–û–ô ü™ô
USDT
TRMLKjSPauqfY9QFQgEHMH42xucSWTkRPA
BTC
1EhHLZCWmWUvutj9ZzuaWdxC2BmUm3g64Q"""

card_message = """üí≥ –û–ü–õ–ê–¢–ê –ö–ê–†–¢–û–ô üí≥
4149499091509693"""

# ====== –û—Ç–ø—Ä–∞–≤—â–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä (–ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏ –±–µ–∫-–Ω–∞–≤–∏–≥–µ–π—à–Ω) ======
def send_start_keyboard(chat_id):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì¶ –ê–°–°–û–†–¢–ò–ú–ï–ù–¢ üì¶")
    return kb

def send_products_keyboard(chat):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for p in products_info.keys():
        kb.add(KeyboardButton(p))
    kb.add(btn_back)
    return kb

def send_countries_keyboard(country_list):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for country in country_list:
        kb.add(KeyboardButton(country))
    kb.add(btn_back)
    return kb

def send_cities_keyboard(country):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for city in cities[country]:
        kb.add(KeyboardButton(f"üåÉ {city} üåÉ"))
    kb.add(btn_back)
    return kb

def send_districts_keyboard(city_name):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for d in districts.get(city_name, []):
        kb.add(KeyboardButton(f"üåÉ {d} üåÉ"))
    kb.add(btn_back)
    return kb

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------

# ====== –°—Ç–∞—Ä—Ç ======
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_state[message.from_user.id] = {'level': 'start'}
    welcome = "üéâüéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâüéâ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    await message.answer(welcome, reply_markup=send_products_keyboard(message.chat))

VLAD, [20.10.2025 11:37]
# ====== –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ ======
@dp.message_handler(lambda message: message.text in products_info.keys())
async def choose_product(message: types.Message):
    uid = message.from_user.id
    user_state.setdefault(uid, {})['product'] = message.text
    user_state[uid]['level'] = 'products'  # —Å–µ–π—á–∞—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞
    product = products_info[message.text]
    try:
        with open(product["image"], "rb") as img:
            await message.answer_photo(img, caption=product["description"])
    except Exception:
        # –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç
        await message.answer(product["description"])
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω
    countries_keyboard = send_countries_keyboard(list(cities.keys()))
    user_state[uid]['level'] = 'country'
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard)

# ====== –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã ======
@dp.message_handler(lambda message: message.text in cities.keys())
async def choose_country(message: types.Message):
    uid = message.from_user.id
    user_state.setdefault(uid, {})['country'] = message.text
    user_state[uid]['level'] = 'city'
    city_kb = send_cities_keyboard(message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: üåÉ", reply_markup=city_kb)

# ====== –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ ======
@dp.message_handler(lambda message: any(city in message.text for city_list in cities.values() for city in city_list))
async def choose_city(message: types.Message):
    uid = message.from_user.id
    city_name = message.text.replace("üåÉ ", "").replace(" üåÉ", "")
    user_state.setdefault(uid, {})['city'] = city_name
    # –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–π–æ–Ω—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –∏–Ω–∞—á–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
    if city_name in districts:
        user_state[uid]['level'] = 'district'
        district_kb = send_districts_keyboard(city_name)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω: üåÉ", reply_markup=district_kb)
    else:
        user_state[uid]['level'] = 'payment'
        await message.answer("–≠—Ç–∞–ø –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_keyboard)

# ====== –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ ======
@dp.message_handler(lambda message: any(district in message.text for district_list in districts.values() for district in district_list))
async def choose_district(message: types.Message):
    uid = message.from_user.id
    district_name = message.text.replace("üåÉ ", "").replace(" üåÉ", "")
    user_state.setdefault(uid, {})['district'] = district_name
    user_state[uid]['level'] = 'payment'
    await message.answer("–≠—Ç–∞–ø –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_keyboard)

# ====== –û–ø–ª–∞—Ç–∞ ======
@dp.message_handler(lambda message: message.text in ["ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ", "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π"])
async def choose_payment(message: types.Message):
    uid = message.from_user.id
    if message.text == "ü™ô –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ":
        await message.answer(crypto_message)
    else:
        await message.answer(card_message)
    user_state.setdefault(uid, {})['level'] = 'confirm'
    await message.answer("–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", reply_markup=confirm_keyboard)

# ====== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã ======
@dp.message_handler(lambda message: message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_payment(message: types.Message):
    uid = message.from_user.id
    user_state.setdefault(uid, {})['level'] = 'final'
    await message.answer("üì∏ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=next_keyboard)
    data = user_state.get(uid, {})
    msg = (
        f"üí∞ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
        f"–¢–æ–≤–∞—Ä: {data.get('product')}\n"
        f"–°—Ç—Ä–∞–Ω–∞: {data.get('country')}\n"
        f"–ì–æ—Ä–æ–¥: {data.get('city')}\n"
        f"–†–∞–π–æ–Ω: {data.get('district')}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}"
    )
    # —à–ª—ë–º –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=msg)
    except Exception as e:
        # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É:", e)

# ====== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ======
@dp.message_handler(lambda message: message.text == "‚û°Ô∏è –î–∞–ª–µ–µ")
async def final_message(message: types.Message):
    await message.answer("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ! üí´ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞! üéÅ")

VLAD, [20.10.2025 11:37]
# ====== –ù–∞–∑–∞–¥ (–æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å) ======
@dp.message_handler(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    uid = message.from_user.id
    state = user_state.get(uid, {'level': 'start'})
    level = state.get('level', 'start')

    # –∫–∞—Ä—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π (–æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥)
    prev_map = {
        'products': 'start',       # –µ—Å–ª–∏ –±—ã–ª–∏ –Ω–∞ products (–ø–æ—Å–ª–µ /start) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä—Ç—É
        'country': 'products',     # –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ -> country => –Ω–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º
        'city': 'country',
        'district': 'city',
        'payment': 'district' if state.get('city') in districts else 'city',
        'confirm': 'payment',
        'final': 'start',
        'start': 'start'
    }
    prev = prev_map.get(level, 'start')
    user_state.setdefault(uid, {})['level'] = prev

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É/—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    if prev == 'start':
        await start_handler(message)
    elif prev == 'products':
        kb = send_products_keyboard(message.chat)
        await message.answer("üì¶ –ê–°–°–û–†–¢–ò–ú–ï–ù–¢:", reply_markup=kb)
    elif prev == 'country':
        countries_keyboard = send_countries_keyboard(list(cities.keys()))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard)
    elif prev == 'city':
        country = state.get('country')
        if country and country in cities:
            kb = send_cities_keyboard(country)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: üåÉ", reply_markup=kb)
        else:
            # fallback ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—ã
            countries_keyboard = send_countries_keyboard(list(cities.keys()))
            user_state[uid]['level'] = 'country'
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=countries_keyboard)
    elif prev == 'district':
        city_name = state.get('city')
        if city_name:
            kb = send_districts_keyboard(city_name)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω: üåÉ", reply_markup=kb)
        else:
            # fallback to cities
            country = state.get('country')
            if country:
                kb = send_cities_keyboard(country)
                user_state[uid]['level'] = 'city'
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥: üåÉ", reply_markup=kb)
            else:
                await start_handler(message)
    elif prev == 'payment':
        await message.answer("–≠—Ç–∞–ø –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_keyboard)
    else:
        await start_handler(message)

# ====== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω (detach) + –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç ======
def spawn_detached():
    """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ–±—è –≤ —Ñ–æ–Ω–æ–≤–æ–º (detached) —Ä–µ–∂–∏–º–µ ‚Äî –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ: –∏–∑–±–µ–≥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–æ–ø–∏–π."""
    # –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ "run_bot" ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if "run_bot" in sys.argv:
        return False

    # —Å–æ–∑–¥–∞—ë–º –Ω–µ–±–æ–ª—å—à–æ–π lock-—Ñ–∞–π–ª —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–≤–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
    lock_path = os.path.join(os.path.dirname(file), "bot_background.lock")
    try:
        # –µ—Å–ª–∏ lock —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –µ—Å—Ç—å —Ñ–æ–Ω. –Ω–µ —Å–ø–∞–≤–Ω–∏–º.
        if os.path.exists(lock_path):
            return False
        # —Å–æ–∑–¥–∞—ë–º lock
        with open(lock_path, "w") as f:
            f.write(str(os.getpid()))
    except Exception:
        pass

VLAD, [20.10.2025 11:37]
try:
        if os.name == 'nt':
            # Windows: –∏—Å–ø–æ–ª—å–∑—É–µ–º CREATE_NEW_PROCESS_GROUP –∏ DETACHED_PROCESS
            CREATE_NEW_PROCESS_GROUP = 0x00000200
            DETACHED_PROCESS = 0x00000008
            subprocess.Popen([sys.executable, file, "run_bot"],
                             stdout=open("bot.log", "a"),
                             stderr=open("bot_error.log", "a"),
                             creationflags=CREATE_NEW_PROCESS_GROUP | DETACHED_PROCESS)
        else:
            # POSIX: –∏—Å–ø–æ–ª—å–∑—É–µ–º setsid –¥–ª—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è
            subprocess.Popen([sys.executable, file, "run_bot"],
                             stdout=open("bot.log", "a"),
                             stderr=open("bot_error.log", "a"),
                             preexec_fn=os.setsid)
        return True
    except Exception as e:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞–≤–Ω–∏—Ç—å detached –ø—Ä–æ—Ü–µ—Å—Å:", e)
        return False

if name == "main":
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–∞—á–µ–¥-–ø—Ä–æ—Ü–µ—Å—Å (–µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω).
    spawned = spawn_detached()
    if spawned:
        print("üîÅ –°–æ–∑–¥–∞–Ω detached (—Ñ–æ–Ω–æ–≤–æ–π) –ø—Ä–æ—Ü–µ—Å—Å. –ü—Ä–æ–¥–æ–ª–∂–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (—á—Ç–æ–±—ã –±—ã–ª–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è).")
    else:
        print("‚ÑπÔ∏è Detached-–ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ –∑–∞–ø—É—â–µ–Ω). –ó–∞–ø—É—Å–∫–∞—é –æ–±—ã—á–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")

    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–ª–æ–∫–∞–ª—å–Ω—ã–π): —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –±–æ—Ç —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ.
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–ª–æ–∫–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å ‚Äî –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞.")
    executor.start_polling(dp, skip_updates=True)